#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <unistd.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <string.h>
#include <ctype.h>
#include <sys/stat.h>
#include <fcntl.h>

/* portul folosit */

#define PORT 2728

char litera1, litera2; /* se retin ultimele 2 cuvinte ale cuvantului jucatorului anterior pentru validare */

int cmp_lit = 1; /* verifica daca este prima runda pentru a valida cuvantul doar dupa prima litera*/

extern int errno; /* eroarea returnata de unele apeluri */

/* functie de convertire a adresei IP a clientului in sir de caractere */
char *conv_addr(struct sockaddr_in address)
{
  static char str[25];
  char port[7];

  /* adresa IP a clientului */
  strcpy(str, inet_ntoa(address.sin_addr));
  /* portul utilizat de client */
  bzero(port, 7);
  sprintf(port, ":%d", ntohs(address.sin_port));
  strcat(str, port);
  return (str);
}

int is_letter(char c) /* verifica daca litera trimisa de catre client este valida */
{
  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
    return 1;
  else
    return 0;
}

int is_word(char w[100], int n) /* verifica daca clientul a trimis un cuvant format doar din litere*/
{
  for (int i = 0; i < n; i++)
    if (is_letter(w[i]) == 0)
      return 0;
  return 1;
}

int is_valid(char msg[100], int ok) /* verifica daca cuvantul respecta regula jocului */
{
  if (ok == 0)
  {
    if (msg[0] == litera1 && msg[1] == litera2)
    {
      litera1 = msg[strlen(msg) - 2];
      litera2 = msg[strlen(msg) - 1];
      return 1;
    }
  }
  else
  {
    if (msg[0] == litera1) /* cazul primului jucator in care cuvantul trebuie verificat cu litera trimisa */
    {
      litera1 = msg[strlen(msg) - 2];
      litera2 = msg[strlen(msg) - 1];
      return 1;
    }
  }
  return 0;
}

int in_dictionary(char msg[100]) /* verifica daca cuvantul trimis de catre client se afla in dictionar */
{
  int f;
  int i;
  char s[100];
  char c;
  int ok = 0;
  for (i = 0; i < strlen(msg); i++)
    msg[i] = msg[i] - 32;
  f = open("dictionar.txt", O_RDONLY);
  i = 0;
  while (read(f, &c, 1))
  {
    if (c < 'A' || c > 'Z')
    {
      s[i] = '\0';
      i = 0;
      if (strcmp(s, msg) == 0)
        return 1;
    }
    else
    {
      s[i] = c;
      i++;
    }
  }
  return 0;
}

/* realizeaza primirea si retrimiterea unui mesaj unui client */
int answer(int fd, int order,int fds_init, int fds_max, int round)
{
  char buffer[100];        /* mesajul */
  int bytes;               /* numarul de octeti cititi/scrisi */
  char msg[100];           //mesajul primit de la client
  char msgrasp[100] = " "; //mesaj de raspuns pentru client
  
    bytes = read(fd, msg, sizeof(buffer));
    if (bytes < 0)
    {
      perror("Eroare la read() de la client.\n");
      return 0;
    }
    /*pregatim mesajul de raspuns */
    bzero(msgrasp, 100);
    msg[strlen(msg) - 1] = '\0';
    printf("Trimitem mesajul inapoi...\n");
    if ((fd - order == 1) || (fd == fds_init && order == fds_max)) /* daca este randul jucatorului care a trimis mesaj */
    {
      if (round == 1)
      {
        if (is_letter(msg[0]))
        {
          strcpy(msgrasp, "Litera este valida\n");
          litera1 = msg[0];
        }
        else
          strcpy(msgrasp, "Raspuns invalid\n");
      }
      else
      {

        if (is_word(msg, strlen(msg)))
        {
          if (is_valid(msg, cmp_lit))
          {
            cmp_lit = 0;
            if (in_dictionary(msg))
            {
              strcpy(msgrasp, "Cuvant valid\n");
            }

            else
            {
              strcpy(msgrasp, "Cuvant gresit\n");
              printf("S-a deconectat jucătorul %d cu descriptorul %d, deoarece a introdus un cuvant gresit.\n", fd - 3, fd);
            }
          }
          else
            strcpy(msgrasp, "Raspuns invalid\n");
        }
        else
          strcpy(msgrasp, "Raspuns invalid\n");
      }
    }
    else
    {
      strcpy(msgrasp, "Nu este randul tau\n");
    }


  if (bytes && write(fd, msgrasp, bytes) < 0)
  {
    perror("Eroare la write() catre client.\n");
    return 0;
  }
  if (strcmp(msgrasp, "Nu este randul tau\n") == 0 || strcmp(msgrasp, "Raspuns invalid\n") == 0)
    bytes = bytes + 1;
  if (strcmp(msgrasp, "Litera este valida\n") == 0)
    bytes = bytes + 2;
  if (strcmp(msgrasp, "Cuvant gresit\n") == 0 || strcmp(msgrasp, "Felicitari! Ai castigat!\n") == 0)
    bytes = 0;
  return bytes;
}


/* programul */
int main()
{
  pid_t pid=1;
  int rv;
  struct sockaddr_in server; /* structurile pentru server si clienti */
  struct sockaddr_in from;
  fd_set readfds;    /* multimea descriptorilor de citire */
  fd_set actfds;     /* multimea descriptorilor activi */
  struct timeval tv; /* structura de timp pentru select() */
  int sd, client;    /* descriptori de socket */
  int optval = 1;    /* optiune folosita pentru setsockopt()*/
  int fd;            /* descriptor folosit pentru 
				   parcurgerea listelor de descriptori */
  int nfds;          /* numarul maxim de descriptori */
  int len;           /* lungimea structurii sockaddr_in */
  int nr_maxim;  /* numarul maxim de jucatori */
  int nr = 0;        /*numarul de jucatori */
  char msj[100];     /* mesaj trimis in cazul in care s-a atins numarul maxim de jucatori */
  int raspuns;       /*raspuns de la server catre client */
  int order;         /* retine descriporul jucatorului anterior pentru a mentine ordinea */
  int ok = 0;        /* pentru a initializa order si fds_max dupa conectarea primului jucator*/
  int fds_init;      /* descriptorul primului jucator*/
  int fds_max;       /* descriptorul ultimului jucator*/
  int round = 1;     /* runda */
  int k=0;           /* pentru actualizarea ultimului descriptor in caz ca se deconecteaza ultimul jucator */
  /* se citeste numarul maxim de clienti din fisierul de configurare */
  int f;
  f=open("config.txt", O_RDONLY);
  char c;
  read(f, &c,1);
  nr_maxim=c-'0';
  printf("%d", nr_maxim);
  /* creare socket */
  if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
  {
    perror("Eroare la socket().\n");
    return errno;
  }

  /*setam pentru socket optiunea SO_REUSEADDR */
  setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));

  /* pregatim structurile de date */
  bzero(&server, sizeof(server));

  /* umplem structura folosita de server */
  server.sin_family = AF_INET;
  server.sin_addr.s_addr = htonl(INADDR_ANY);
  server.sin_port = htons(PORT);

  /* atasam socketul */
  if (bind(sd, (struct sockaddr *)&server, sizeof(struct sockaddr)) == -1)
  {
    perror("Eroare la bind().\n");
    return errno;
  }

  /* punem serverul sa asculte daca vin clienti sa se conecteze */
  if (listen(sd, 5) == -1)
  {
    perror("Eroare la listen().\n");
    return errno;
  }

  /* completam multimea de descriptori de citire */
  FD_ZERO(&actfds);    /* initial, multimea este vida */
  FD_SET(sd, &actfds); /* includem in multime socketul creat */

  tv.tv_sec = 1; /* se va astepta un timp de 1 sec. */
  tv.tv_usec = 0;

  /* valoarea maxima a descriptorilor folositi */
  nfds = sd;

  printf("Asteptam la portul %d...\n", PORT);
  fflush(stdout);

  /* servim in mod concurent clientii... */
  while (1)
  {
    
      /* ajustam multimea descriptorilor activi (efectiv utilizati) */
      bcopy((char *)&actfds, (char *)&readfds, sizeof(readfds));

      /* apelul select() */
      if (select(nfds + 1, &readfds, NULL, NULL, NULL) < 0)
      {
        perror("Eroare la select().\n");
        return errno;
      }
      /* vedem daca e pregatit socketul pentru a-i accepta pe clienti */
      if (FD_ISSET(sd, &readfds))
      {
        /* pregatirea structurii client */
        len = sizeof(from);
        bzero(&from, sizeof(from));

        /* a venit un client, acceptam conexiunea */
        client = accept(sd, (struct sockaddr *)&from, &len);

        /* eroare la acceptarea conexiunii de la un client */
        if (client < 0)
        {
          perror("Eroare la accept().\n");
          continue;
        }
        else
          nr = nr + 1; /* daca conexiunea a fost acceptata cu succes, se incrementeaza numarul de jucatori*/

        if (nr > nr_maxim) /* daca s-a depasit numarul maxim de jucatori se transmite mesaj*/
        {
          printf("Conexiune respinsă.\n");
          fflush(stdout);
          bzero(msj, sizeof(msj));
          sprintf(msj, "S-a atins deja numarul maxim de jucatori : %d \n", nr_maxim);
          write(client, msj, sizeof(msj));
          close(client);
        }
        else
        {
          if (nfds < client) /* ajusteaza valoarea maximului */
            nfds = client;
          /* includem in lista de descriptori activi si acest socket */
          FD_SET(client, &actfds);
          if (ok == 0) /* daca s-a conectat primul jucator se initializeaza order cu o valoare mai mica si fds_max cu valoarea descriptorului curent*/
          {
            fds_init=client;
            order = client - 1;
            fds_max = order + nr - 1;
            ok = 1;
          }
          printf("[server] S-a conectat jucatorul %d, de la adresa %s.\n", client - order, conv_addr(from));
          fflush(stdout);
          fds_max = fds_max + 1; /* dupa ce se conecteaza un jucator se incrementeaza valoarea fds_max*/
          bzero(msj, sizeof(msj));
          sprintf(msj, "Buna jucator %d. Bine ai venit la jocul FAZAN\n", client - order);
          fflush(stdout);
          write(client, msj, sizeof(msj));
        }
      }
      /* vedem daca e pregatit vreun socket client pentru a trimite raspunsul */
      for (fd = 0; fd <= nfds; fd++) /* parcurgem multimea de descriptori */
      {
        /* este un socket de citire pregatit? */
        if (fd != sd && FD_ISSET(fd, &readfds))
        {
          switch(pid=fork()){
        case -1:
          perror("fork");
          exit(1);
        case 0:
          if(nr==1) /* daca a mai ramas un singur jucator, acesta este castigatorul */
            {
              write(fd, "Felicitari!Ai castigat!\n", 30);
              write(fd, "exit\n", 10);
              fflush(stdout);
              close(fd);
              FD_CLR(fd, &actfds);
              FD_ZERO(&actfds);
              return 0;
            }
            raspuns = answer(fd, order,fds_init, fds_max, round); /* serverul raspunde jucatorului curent */
            if(k==1) /* daca runda anterioara ultimul jucator s-a deconectat, se actualizeaza descriptorul */
            {
              fds_max--;
              k=0;
            }
            if (raspuns != 101 && raspuns != 102) /* doar daca cuvantul trimis de catre jucator este valid, se actualizeaza ordinea */
              order = fd;
            else if (round > 1)
              round++;
            if (raspuns == 102) /* cazul primului jucator ce trebuie sa aleaga si litera*/
              round++;
            if (raspuns == 0) /* daca cuvantul este gresit, se deconecteaza jucatorul*/
            {
              if(fd==fds_init) /* s-a deconectat primul jucator, se actualizeaza descriptorul primului jucator*/
                fds_init++;
              if(fd==fds_max) /* s-a deconectat ultimul jucator, runda urmatoare va trebui actualizat descriptorul ultimului jucator*/
                k=1;
              write(fd, "exit\n", 10);
              fflush(stdout);
              close(fd);
              FD_CLR(fd, &actfds);
              nr--;
              exit(rv);
            }
        default: 
          wait(&rv);
          continue;
        }
        

      } /* for */
    } /* switch */  
  }  /* while */
} /* main */
